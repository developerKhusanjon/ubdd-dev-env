package uz.ciasev.ubdd_service.repository.resolution.decision;

import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;
import uz.ciasev.ubdd_service.entity.EntityNameAlias;
import uz.ciasev.ubdd_service.entity.dict.NotificationTypeAlias;
import uz.ciasev.ubdd_service.entity.dict.Organ;
import uz.ciasev.ubdd_service.entity.dict.VictimTypeAlias;
import uz.ciasev.ubdd_service.entity.resolution.decision.Decision;
import uz.ciasev.ubdd_service.entity.resolution.decision.DecisionCourtAutogeneratedPdfProjection;
import uz.ciasev.ubdd_service.entity.resolution.decision.DecisionExcelProjection;
import uz.ciasev.ubdd_service.entity.resolution.decision.DecisionFullListProjection;
import uz.ciasev.ubdd_service.entity.resolution.punishment.PenaltyDecisionForMibProjection;
import uz.ciasev.ubdd_service.entity.status.AdmStatusAlias;
import uz.ciasev.ubdd_service.entity.temporary.UbddDecison202311Projection;
import uz.ciasev.ubdd_service.entity.violator.Violator;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

public interface DecisionRepository extends DecisionCustomRepository, JpaRepository<Decision, Long>, JpaSpecificationExecutor<Decision> {

    List<Decision> findByResolutionId(Long resolutionId);

    @Query("SELECT d.status.alias FROM Decision d WHERE d.resolutionId = :resolutionId")
    List<AdmStatusAlias> findStatusAliasesByResolutionId(Long resolutionId);

    @Query("SELECT d FROM Decision d WHERE d.resolutionId IN (:resolutions)")
    List<Decision> findByResolutionIds(@Param("resolutions") List<Long> resolutions);

    @Query("SELECT d.violator FROM Decision d WHERE d.id = :decisionId")
    Violator findViolatorByDecisionId(Long decisionId);

    Optional<Decision> findByResolutionIdAndViolatorId(Long resolutionId, Long violatorId);

    @Query("SELECT c " +
            " FROM Decision c " +
            " JOIN Resolution r ON r.id = c.resolutionId " +
            "WHERE c.violatorId = :violatorId " +
            "  AND r.isActive = TRUE")
    Optional<Decision> findActiveByViolatorId(Long violatorId);

    @Query("SELECT d.id as id, " +
            "   d.violator.person.firstNameLat as violatorFirstNameLat, " +
            "   d.violator.person.secondNameLat as violatorSecondNameLat, " +
            "   d.violator.person.lastNameLat as violatorLastNameLat " +
            " FROM Decision d " +
            " JOIN Resolution r ON r.id = d.resolutionId " +
            "WHERE r.admCaseId = :admCaseId " +
            "  AND r.isActive = TRUE")
    List<DecisionCourtAutogeneratedPdfProjection> findActiveByAdmCaseId(Long admCaseId);

    @Query("SELECT d.id as id, p.number as number " +
            " FROM UbddDecison202311 ubdd " +
            " LEFT JOIN Protocol p ON p.number = ubdd.number " +
            " LEFT JOIN ViolatorDetail vd ON vd.id = p.violatorDetailId" +
            " LEFT JOIN Violator v ON v.id = vd.violatorId" +
            " LEFT JOIN Decision d ON d.violatorId = vd.id" +
            " WHERE d.isActive=true and ubdd.sendDate is null")
    List<UbddDecison202311Projection> findAllByProtocolNumbers();

    List<Decision> findBySeriesAndNumber(@Param("series") String series,
                                         @Param("number") String number);

    @Modifying
    @Query("UPDATE Decision SET violatorId = :newId WHERE violatorId = :oldId")
    void changViolatorId(@Param("oldId") Long oldId, @Param("newId") Long newId);

    @Query("SELECT d.id as id, " +
            "d.decisionTypeId as decisionTypeId, " +
            "d.series as series, " +
            "d.number as number, " +
            "d.statusId as statusId, " +
            "d.violator.person.firstNameLat as violatorFirstNameLat, " +
            "d.violator.person.secondNameLat as violatorSecondNameLat, " +
            "d.violator.person.lastNameLat as violatorLastNameLat, " +
            "d.violator.person.birthDate as violatorBirthDate, " +
            "d.violator.person.nationalityId as violatorNationalityId, " +
            "d.violator.person.genderId as violatorGenderId, " +
            "d.violator.actualAddress.fullAddressText as violatorActualAddressText, " +
            "d.violator.postAddress.fullAddressText as violatorPostAddressText, " +
            "d.articlePart.id as articlePartId, " +
            "d.articleViolationType.id as articleViolationTypeId, " +
            "d.resolution.isActive as isActive, " +
            "d.resolution.organId as organId," +
            "d.resolution.departmentId as departmentId, " +
            "d.resolution.regionId as regionId, " +
            "d.resolution.districtId as districtId, " +
            "d.resolution.resolutionTime as resolutionTime, " +
            "pm.type.id as mainPunishmentTypeId, " +
            "pa.type.id as additionalPunishmentTypeId, " +
            "pm.amountText as mainPunishmentAmountText, " +
            "pa.amountText as additionalPunishmentAmountText, " +
            "mm.totalRecoveredAmount as mibTotalRecoveredAmount, " +
            "EXISTS (SELECT id FROM ForceExecution fe WHERE fe.type = 'MIB' AND fe.punishmentId = pm.id) AS isMibForceExecution, " +
            "inv.invoiceSerial as penaltyInvoiceSerial, " +
            "pp.isDiscount70 as penaltyIsDiscount70Flag, " +
            "pp.discount70Amount as penaltyDiscount70Amount, " +
            "pp.discount70ForDate as penaltyDiscount70ForDate, " +
            "pp.isDiscount50 as penaltyIsDiscount50Flag, " +
            "pp.discount50Amount as penaltyDiscount50Amount, " +
            "pp.discount50ForDate as penaltyDiscount50ForDate, " +
            "pp.paidAmount as penaltyPaidAmount, " +
            "pp.lastPayTime as penaltyLastPayTime, " +
            "compensation.amount as govCompensationAmount, " +
            "compensation.paidAmount as govCompensationPaidAmount " +
            "FROM Decision d " +
            "   LEFT JOIN Punishment pm ON pm.decisionId = d.id AND pm.isMain = true " +
            "   LEFT JOIN PenaltyPunishment pp ON pp.punishmentId = pm.id " +
            "   LEFT JOIN Invoice inv ON pp.id = inv.penaltyPunishmentId " +
            "   LEFT JOIN Punishment pa ON pa.decisionId = d.id AND pa.isMain = false " +
            "   LEFT JOIN MibExecutionCard c ON c.decisionId = d.id " +
            "   LEFT JOIN MibCardMovement mm ON c.id = mm.cardId AND mm.isActive = TRUE " +
            "   LEFT JOIN Compensation compensation ON compensation.decisionId = d.id AND compensation.victimTypeId = " +
            VictimTypeAlias.GOVERNMENT_ID +
            "WHERE d.id IN :ids"
    )
    List<DecisionFullListProjection> findAllFullListProjectionById(@Param("ids") Iterable<Long> ids, Sort sort);

    @Modifying
    @Transactional
    @Query("UPDATE Decision d SET d.handleByMibPreSend = TRUE WHERE d.id = :decisionId")
    void setHandleByMibPreSendToTrue(@Param("decisionId") Long decisionId);

    @Modifying
    @Transactional
    @Query("UPDATE Decision d SET d.statusId = :statusId WHERE d.id = :decisionId")
    void saveStatus(@Param("decisionId") Long decisionId, @Param("statusId") Long statusId);


    @Query("SELECT d.id as id, " +
            " d.series as series, " +
            " d.number as number, " +
            " jsonb_extract_path_text(d.status.name, 'lat') as statusNameLat, " +
            " jsonb_extract_path_text(articlePart.name, 'lat') as articlePartNameLat, " +
            " d.violator.person.firstNameLat as violatorFirstNameLat, " +
            " d.violator.person.secondNameLat as violatorSecondNameLat, " +
            " d.violator.person.lastNameLat as violatorLastNameLat, " +
            " d.violator.person.birthDate as violatorBirthDate, " +
            " d.violator.actualAddress.fullAddressText as actualAddressText, " +
            " d.resolution.considerInfo as considerInfo, " +
            " d.resolution.resolutionTime as resolutionTime, " +
            " jsonb_extract_path_text(d.resolution.organ.name, 'lat') as organNameLat, " +
            " jsonb_extract_path_text(department.name, 'lat') as departmentNameLat, " +
            " jsonb_extract_path_text(d.resolution.region.name, 'lat') as regionNameLat, " +
            " jsonb_extract_path_text(district.name, 'lat') as districtNameLat, " +
            " jsonb_extract_path_text(terminationReason.name, 'lat') as terminationReasonNameLat, " +
            " jsonb_extract_path_text(mainPunishmentType.name, 'lat') as mainPunishmentTypeNameLat, " +
            " jsonb_extract_path_text(additionalPunishmentType.name, 'lat') as additionPunishmentTypeNameLat, " +
            " penalty.lastPayTime as penaltyLastPayTime, " +
            " penalty.amount as penaltyAmount, " +
            " penalty.paidAmount as penaltyPaidAmount, " +
            // Mib data
            "mibCard.outNumber as mibOutNumber, " +
            "firstMibMovement.sendTime as mibFirstSendTime, " +
            "mibMovement.sendTime as mibSendTime, " +
            "jsonb_extract_path_text(mibMovementRegion.name, 'lat') as mibRegion, " +
            "jsonb_extract_path_text(mibMovementDistrict.name, 'lat') as mibDistrict, " +
            "jsonb_extract_path_text(mibMovementSendStatus.name, 'lat') as mibSendStatus, " +
            "jsonb_extract_path_text(mibMovementCaseStatus.name, 'lat') as mibCaseStatus, " +
            "mibMovement.returnTime as mibReturnTime, " +
            "mibMovement.sendMessage as mibSendMessage, " +
            "compensation.amount as govCompensationAmount, " +
            "compensation.paidAmount as govCompensationPaidAmount " +
            "FROM Decision d " +
            "   LEFT JOIN ArticlePart articlePart ON d.articlePartId = articlePart.id " +
            "   LEFT JOIN TerminationReason terminationReason ON d.terminationReasonId = terminationReason.id " +
            "   LEFT JOIN Punishment mainPunishment ON mainPunishment.decisionId = d.id AND mainPunishment.isMain = true " +
            "   LEFT JOIN PunishmentType mainPunishmentType ON mainPunishment.punishmentTypeId = mainPunishmentType.id " +
            "   LEFT JOIN Punishment additionalPunishment ON additionalPunishment.decisionId = d.id AND additionalPunishment.isMain = false " +
            "   LEFT JOIN PunishmentType additionalPunishmentType ON additionalPunishment.punishmentTypeId = additionalPunishmentType.id " +
            "   LEFT JOIN PenaltyPunishment penalty ON mainPunishment.id = penalty.punishmentId " +
            "   LEFT JOIN Department department ON d.resolution.departmentId = department.id " +
            "   LEFT JOIN District district ON d.resolution.districtId = district.id " +
            // Mib data
            "   LEFT JOIN MibExecutionCard mibCard ON mibCard.decisionId = d.id " +
            "   LEFT JOIN MibCardMovement firstMibMovement ON mibCard.id = firstMibMovement.cardId AND firstMibMovement.isFirst = TRUE " +
            "   LEFT JOIN MibCardMovement mibMovement ON mibCard.id = mibMovement.cardId AND mibMovement.isActive = TRUE " +
            "   LEFT JOIN Region mibMovementRegion ON mibMovementRegion.id = mibMovement.regionId " +
            "   LEFT JOIN District mibMovementDistrict ON mibMovementDistrict.id = mibMovement.districtId " +
            "   LEFT JOIN MibSendStatus mibMovementSendStatus ON mibMovementSendStatus.id = mibMovement.sendStatusId " +
            "   LEFT JOIN MibCaseStatus mibMovementCaseStatus ON mibMovementCaseStatus.id = mibMovement.mibCaseStatusId " +
            "   LEFT JOIN Compensation compensation ON compensation.decisionId = d.id AND compensation.victimTypeId = " +
            VictimTypeAlias.GOVERNMENT_ID +

            "WHERE d.id IN :ids"
    )
    List<DecisionExcelProjection> findExcelProjectionById(@Param("ids") Iterable<Long> ids, Sort sort);

    @Query("SELECT d.resolution.admCase.organ FROM Decision d WHERE d = :decision")
    Optional<Organ> findAdmCaseOrganByDecision(Decision decision);

    @Query(value = "SELECT p.execution_date " +
            " FROM {h-schema}punishment p " +
            " WHERE p.decision_id = :decisionId " +
            "UNION " +
            "SELECT c.execution_date " +
            " FROM {h-schema}compensation c " +
            " WHERE c.decision_id = :decisionId AND c.victim_type_id = 2 " +
            "ORDER BY execution_date DESC " +
            "LIMIT 1 ", nativeQuery = true)
    Optional<Date> extractExecutionDateFromPartsByDecision(Long decisionId);

    @Modifying
    @Transactional
    @Query("UPDATE Decision d SET d.executedDate = :executedDate WHERE d.id = :decisionId")
    void setExecutedDate(Long decisionId, LocalDate executedDate);

    @Query("SELECT s.alias " +
            " FROM AdmStatus s" +
            " WHERE s.id IN (" +
            "   SELECT p.statusId " +
            "    FROM Punishment p " +
            "    WHERE p.decision = :decision " +
            " )")
    List<AdmStatusAlias> getPartsStatusAliasesByDecision(Decision decision);

    @Query("SELECT DISTINCT d " +
            "FROM Protocol p " +
            "JOIN Resolution r ON r.admCaseId = p.violatorDetail.violator.admCaseId AND r.isActive = TRUE " +
            "JOIN Decision d ON d.resolutionId = r.id AND d.violatorId = p.violatorDetail.violator.id " +
            "WHERE p.series = :series AND p.number = :number")
    Optional<Decision> findByProtocolSeriesAndNumber(String series, String number);

    @Modifying
    @Query(value = "update core_v0.decision d set need_status_sync = false " +
            "where d.id = :id ", nativeQuery = true)
    void setStatusSynced(Long id);

    @Query(value = "select d.id " +
            "from core_v0.decision d " +
            "where d.need_status_sync = True " +
            "limit :n ", nativeQuery = true)
    List<Long> getNextNForStatusSync(Long n);

    @Query("SELECT COUNT(cmf) > 0 FROM CourtMaterialFields cmf WHERE cmf.resolutionId = :resolutionId ")
    Optional<Boolean> resolutionExistsInMaterials(Long resolutionId);

    @Query("SELECT dec FROM CourtMaterialFields cmf " +
            "INNER JOIN CourtMaterialDecision cmd " +
            "ON cmf.materialId = cmd.courtMaterialId " +
            "AND cmf.resolutionId = :resolutionId " +
            "INNER JOIN Decision dec " +
            "ON dec.id = cmd.decisionId " +
            "GROUP BY dec ")
    Optional<Decision> findOriginalDecisionFor315(Long resolutionId);


    @Query("SELECT d.id as id, " +
            " d.series as series, " +
            " d.number as number, " +
            " d.executionFromDate as executionFromDate, " +
            " d.resolution.resolutionTime as resolutionTime, " +
            " pp.amount as penaltyAmount, " +
            " pp.paidAmount as penaltyPaidAmount, " +
            " pp.lastPayTime as penaltyLastPayTime, " +
            " d.violatorId as violatorId, " +
            " d.violator.person.firstNameLat as violatorFirstNameLat, " +
            " d.violator.person.secondNameLat as violatorSecondNameLat, " +
            " d.violator.person.lastNameLat as violatorLastNameLat, " +
            " d.violator.actualAddress.fullAddressText as violatorAddressText, " +
            " c.regionId as mibRegionId, " +
            " c.districtId as mibDistrictId, " +
            " c.notificationTypeAlias as presetNotificationTypeAlias, " +
            " c.notificationId as presetNotificationId, " +
            " m.sendMessage as mibSendMessage, " +
            " m.mibCaseNumber as mibCaseNumber, " +
            " m.mibCaseStatusId as mibCaseStatusId, " +
            " ms.typeId as mibCaseStatusTypeId, " +
            " m.totalRecoveredAmount as totalRecoveredAmount, " +
            " m.sendTime as sendTime, " +
            " m.acceptTime as acceptTime, " +
            " m.returnTime as returnTime, " +
            " sms.sendTime as smsSendDate, " +
            " sms.receiveTime as smsReceiveDate, " +
            " sms.deliveryStatusId as smsDeliveryStatusId, " +
            " mail.sendTime as mailSendDate, " +
            " mail.receiveDate as mailReceiveDate, " +
            " mail.deliveryStatusId as mailDeliveryStatusId " +
            "FROM PenaltyPunishment pp " +
            " JOIN pp.punishment.decision d " +
            " LEFT JOIN MibExecutionCard c ON c.decisionId = d.id " +
            " LEFT JOIN MibCardMovement m ON c.id = m.cardId AND m.isActive = TRUE " +
            " LEFT JOIN m.mibCaseStatus ms " +
            " LEFT JOIN SmsNotification sms ON (sms.entityId = d.id AND sms.entityType = '" + EntityNameAlias.DECISION_NAME + "' AND sms.notificationTypeId = " + NotificationTypeAlias.MIB_PRE_SEND_ID + ") " +
            " LEFT JOIN MailNotification mail ON (mail.decisionId = d.id AND mail.notificationTypeId = " + NotificationTypeAlias.MIB_PRE_SEND_ID + ") " +
            "WHERE d.id IN :ids"
    )
    List<PenaltyDecisionForMibProjection> findDecisionForMibList(Iterable<Long> ids, Sort sort);
    // ииза опоещений список может начать множиться. пусть пока остаанеться так, потом придумаем как пофиксить.

    @Query("SELECT d.violatorId FROM Decision d WHERE d.id = :decisionId")
    Optional<Long> getViolatorIdByDecisionId(Long decisionId);

}
